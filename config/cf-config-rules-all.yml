AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    ConfigConfigRule:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "cloud-trail-enabled"
            Description: "Checks whether AWS CloudTrail is enabled in your AWS account. Optionally, you can specify which S3 bucket, SNS topic, and Amazon CloudWatch Logs ARN to use."
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUD_TRAIL_ENABLED"
            MaximumExecutionFrequency: "TwentyFour_Hours"

    ConfigConfigRule2:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "cloudtrail-enabled"
            Description: "Checks whether AWS CloudTrail is enabled in your AWS account. Optionally, you can specify which S3 bucket, SNS topic, and Amazon CloudWatch Logs ARN to use."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUD_TRAIL_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "TwentyFour_Hours"

    ConfigConfigRule3:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "db-instance-backup-enabled"
            Description: "Checks whether RDS DB instances have backups enabled. Optionally, the rule checks the backup retention period and the backup window."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBInstance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "DB_INSTANCE_BACKUP_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule4:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "ebs-optimized-instance"
            Description: "Checks whether EBS optimization is enabled for your EC2 instances that can be EBS-optimized."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Instance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EBS_OPTIMIZED_INSTANCE"
            InputParameters: "{}"

    ConfigConfigRule5:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "ec2-instance-detailed-monitoring-enabled"
            Description: "Checks whether detailed monitoring is enabled for EC2 instances."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Instance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_INSTANCE_DETAILED_MONITORING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule6:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "ec2-instance-managed-by-systems-manager"
            Description: "Checks whether the Amazon EC2 instances in your account are managed by AWS Systems Manager."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Instance"
                  - "AWS::SSM::ManagedInstanceInventory"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_INSTANCE_MANAGED_BY_SSM"
            InputParameters: "{}"

    ConfigConfigRule7:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "ec2-instances-in-vpc"
            Description: "Checks whether your EC2 instances belong to a virtual private cloud (VPC). Optionally, you can specify the VPC ID to associate with your instances."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Instance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "INSTANCES_IN_VPC"
            InputParameters: "{}"

    ConfigConfigRule8:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "ec2-volume-inuse-check"
            Description: "Checks whether EBS volumes are attached to EC2 instances. Optionally checks if EBS volumes are marked for deletion when an instance is terminated."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Volume"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_VOLUME_INUSE_CHECK"
            InputParameters: "{}"

    ConfigConfigRule9:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "encrypted-volumes"
            Description: "Checks whether EBS volumes that are in an attached state are encrypted. Optionally, you can specify the ID of a KMS key to use to encrypt the volume."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Volume"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ENCRYPTED_VOLUMES"
            InputParameters: "{}"

    ConfigConfigRule10:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "iam-password-policy"
            Description: "Checks whether the account password policy for IAM users meets the specified requirements."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"RequireUppercaseCharacters\\":\\"true\\",\\"RequireLowercaseCharacters\\":\\"true\\",\\"RequireSymbols\\":\\"true\\",\\"RequireNumbers\\":\\"true\\",\\"MinimumPasswordLength\\":\\"8\\",\\"PasswordReusePrevention\\":\\"24\\",\\"MaxPasswordAge\\":\\"90\\"}"
            MaximumExecutionFrequency: "One_Hour"

    ConfigConfigRule11:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "rds-storage-encrypted"
            Description: "Checks whether storage encryption is enabled for your RDS DB instances."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBInstance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_STORAGE_ENCRYPTED"
            InputParameters: "{}"

    ConfigConfigRule12:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "required-application-tags"
            Description: "Checks whether your resources have the tags that you specify."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::ACM::Certificate"
                  - "AWS::AutoScaling::AutoScalingGroup"
                  - "AWS::CodeBuild::Project"
                  - "AWS::DynamoDB::Table"
                  - "AWS::EC2::CustomerGateway"
                  - "AWS::EC2::Instance"
                  - "AWS::EC2::InternetGateway"
                  - "AWS::EC2::NetworkAcl"
                  - "AWS::EC2::NetworkInterface"
                  - "AWS::EC2::RouteTable"
                  - "AWS::EC2::SecurityGroup"
                  - "AWS::EC2::Subnet"
                  - "AWS::EC2::Volume"
                  - "AWS::EC2::VPC"
                  - "AWS::EC2::VPNConnection"
                  - "AWS::EC2::VPNGateway"
                  - "AWS::ElasticLoadBalancing::LoadBalancer"
                  - "AWS::ElasticLoadBalancingV2::LoadBalancer"
                  - "AWS::RDS::DBInstance"
                  - "AWS::RDS::DBSecurityGroup"
                  - "AWS::RDS::DBSnapshot"
                  - "AWS::RDS::DBSubnetGroup"
                  - "AWS::RDS::EventSubscription"
                  - "AWS::Redshift::Cluster"
                  - "AWS::Redshift::ClusterSecurityGroup"
                  - "AWS::Redshift::ClusterSnapshot"
                  - "AWS::Redshift::ClusterSubnetGroup"
                  - "AWS::S3::Bucket"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "REQUIRED_TAGS"
            InputParameters: "{\\"tag1Key\\":\\"Application\\",\\"tag1Value\\":\\"Acuity,AzureDevOps,CRM,DREAM,Exchange,Global-API,GreatPlains,Infrastructure,LinkNet,MobileIron,PaloAlto,RedFox,ReportingServer,SGS,SecurityServer,SigueDotCom,SigueLink,SiguePay,SolarWinds,Soteica,Splunk,Citrix,SiguePayOut,PaymentGatewayAPI,CheckFree,SigueBridge,SiSigueDotCom\\"}"

    ConfigConfigRule13:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "restricted-common-ports"
            Description: "Checks whether security groups that are in use disallow unrestricted incoming TCP traffic to the specified ports."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::SecurityGroup"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RESTRICTED_INCOMING_TRAFFIC"
            InputParameters: "{\\"blockedPort1\\":\\"20\\",\\"blockedPort2\\":\\"21\\",\\"blockedPort3\\":\\"3389\\",\\"blockedPort4\\":\\"3306\\",\\"blockedPort5\\":\\"4333\\"}"

    ConfigConfigRule14:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "restricted-ssh"
            Description: "Checks whether security groups that are in use disallow unrestricted incoming SSH traffic."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::SecurityGroup"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "INCOMING_SSH_DISABLED"
            InputParameters: "{}"

    ConfigConfigRule15:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "root-account-mfa-enabled"
            Description: "Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in."
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ROOT_ACCOUNT_MFA_ENABLED"
            MaximumExecutionFrequency: "TwentyFour_Hours"

    ConfigConfigRule16:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-access-keys-rotated-6qfp4f"
            Description: "Checks whether the active access keys are rotated within the number of days specified in maxAccessKeyAge"
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ACCESS_KEYS_ROTATED"
            InputParameters: "{\\"maxAccessKeyAge\\":\\"90\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule17:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-acm-certificate-expiration-check-c7496c83"
            Description: "Imported ACM certificates should be renewed within the number of days specified."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::ACM::Certificate"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ACM_CERTIFICATE_EXPIRATION_CHECK"
            InputParameters: "{\\"daysToExpiration\\":\\"30\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule18:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-alb-http-drop-invalid-header-enabled-91e6039b"
            Description: "Checks if rule evaluates Application Load Balancers (ALBs) to ensure they are configured to drop http headers. The rule is NON_COMPLIANT if the value of routing.http.drop_invalid_header_fields.enabled is set to false."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ALB_HTTP_DROP_INVALID_HEADER_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule19:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-alb-http-to-https-redirection-check-4b56a09c"
            Description: "Checks whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers. The rule is NON_COMPLIANT if one or more HTTP listeners of Application Load Balancers do not have HTTP to HTTPS redirection configured."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule20:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-api-gw-associated-with-waf-2680625a"
            Description: "This control checks to see if an API Gateway stage is using an AWS WAF Web ACL. This control fails if an AWS WAF Web ACL is not attached to a REST API Gateway stage."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "API_GW_ASSOCIATED_WITH_WAF"
            InputParameters: "{}"

    ConfigConfigRule21:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-api-gw-cache-encrypted-799cc6a8"
            Description: "This control checks whether all methods in Amazon API Gateway REST API stages that have cache enabled are encrypted. The control fails if any method in API Gateway REST API stage is configured to cache and the cache is not encrypted."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::ApiGateway::Stage"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule22:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-api-gw-execution-logging-enabled-3f09fd08"
            Description: "Checks that all stages in Amazon API Gateway REST and WebSocket APIs have logging enabled. The rule is NON_COMPLIANT if logging is not enabled. The rule is NON_COMPLIANT if loggingLevel is neither ERROR nor INFO."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "API_GW_EXECUTION_LOGGING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule23:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-api-gw-ssl-enabled-221ad7e3"
            Description: "Checks if a REST API stage uses an Secure Sockets Layer (SSL) certificate. This rule is NON_COMPLIANT if the REST API stage does not have an associated SSL certificate."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "API_GW_SSL_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule24:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-api-gw-xray-enabled-c827b333"
            Description: "Checks if AWS X-Ray tracing is enabled on Amazon API Gateway REST APIs. The rule is COMPLIANT if X-Ray tracing is enabled and NON_COMPLIANT otherwise."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "API_GW_XRAY_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule25:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-aurora-mysql-backtracking-enabled-a58f50da"
            Description: "This control checks if Amazon Aurora clusters have backtracking enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "AURORA_MYSQL_BACKTRACKING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule26:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-autoscaling-group-elb-healthcheck-required-c9706195"
            Description: "Checks whether your Auto Scaling groups that are associated with a load balancer are using Elastic Load Balancing health checks."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::AutoScaling::AutoScalingGroup"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "AUTOSCALING_GROUP_ELB_HEALTHCHECK_REQUIRED"
            InputParameters: "{}"

    ConfigConfigRule27:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-beanstalk-enhanced-health-reporting-enabled-81d01894"
            Description: "Checks for Elastic Beanstalk environment is configured for 'enhanced' health reporting and NON_COMPLIANT if configured for 'basic' health reporting."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "BEANSTALK_ENHANCED_HEALTH_REPORTING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule28:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloud-trail-cloud-watch-logs-enabled-56l61h"
            Description: "Checks whether AWS CloudTrail trails are configured to send logs to Amazon CloudWatch logs."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::CloudTrail::Trail"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule29:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloud-trail-encryption-enabled-9kafzq"
            Description: "Ensure CloudTrail logs are encrypted at rest using KMS CMKs"
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::CloudTrail::Trail"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUD_TRAIL_ENCRYPTION_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule30:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloud-trail-log-file-validation-enabled-uz9mg"
            Description: "Checks whether AWS CloudTrail creates a signed digest file with logs."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::CloudTrail::Trail"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule31:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloudfront-accesslogs-enabled-aa9ec570"
            Description: "This control checks to see if server access logging is enabled on CloudFront Distributions. The control will fail if access logging is not enabled for the distribution."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUDFRONT_ACCESSLOGS_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule32:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloudfront-associated-with-waf-9eed35fe"
            Description: "This control checks to see if Cloudfront distributions are associated with either WAF or WAFv2 web ACLs. The control will fail if the distribution is not associated with a web ACL."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUDFRONT_ASSOCIATED_WITH_WAF"
            InputParameters: "{}"

    ConfigConfigRule33:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloudfront-default-root-object-configured-e2b67752"
            Description: "Checks if an Amazon CloudFront distribution is configured to return a specific object that is the default root object. The rule is NON_COMPLIANT if CloudFront distribution does not have a default root object configured."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUDFRONT_DEFAULT_ROOT_OBJECT_CONFIGURED"
            InputParameters: "{}"

    ConfigConfigRule34:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloudfront-origin-access-identity-enabled-755d00c4"
            Description: "Checks that Amazon CloudFront distribution with Amazon S3 Origin type has Origin Access Identity (OAI) configured."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUDFRONT_ORIGIN_ACCESS_IDENTITY_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule35:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloudfront-origin-failover-enabled-e655ef04"
            Description: "Checks whether an origin group is configured for the distribution of at least 2 origins in the origin group for Amazon CloudFront. This rule is NON_COMPLIANT if there are no origin groups for the distribution."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUDFRONT_ORIGIN_FAILOVER_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule36:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cloudfront-viewer-policy-https-05abff33"
            Description: "Checks whether your Amazon CloudFront distributions use HTTPS (directly or via a redirection)."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUDFRONT_VIEWER_POLICY_HTTPS"
            InputParameters: "{}"

    ConfigConfigRule37:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule2}-f4eaa2a1"
            Description: "Checks whether AWS CloudTrail is enabled in your AWS account."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CLOUD_TRAIL_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule38:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-cmk-backing-key-rotation-enabled-vhhlii"
            Description: "Checks that key rotation is enabled for customer created customer master key (CMK)"
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::KMS::Key"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CMK_BACKING_KEY_ROTATION_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule39:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-codebuild-project-envvar-awscred-check-bed3910f"
            Description: "Checks whether the project contains environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::CodeBuild::Project"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CODEBUILD_PROJECT_ENVVAR_AWSCRED_CHECK"
            InputParameters: "{}"

    ConfigConfigRule40:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-codebuild-project-source-repo-url-check-61b9b358"
            Description: "Checks whether the GitHub or Bitbucket source repository URL contains either personal access tokens or user name and password."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::CodeBuild::Project"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "CODEBUILD_PROJECT_SOURCE_REPO_URL_CHECK"
            InputParameters: "{}"

    ConfigConfigRule41:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-dax-encryption-enabled-28c19374"
            Description: "Checks that DynamoDB Accelerator (DAX) clusters are encrypted. The rule is NON_COMPLIANT if a DAX cluster is not encrypted."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "DAX_ENCRYPTION_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule42:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-dms-replication-not-public-9a1af815"
            Description: "Checks whether AWS Database Migration Service replication instances are public. The rule is NON_COMPLIANT if PubliclyAccessible field is true."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::DMS::ReplicationInstance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "DMS_REPLICATION_NOT_PUBLIC"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule43:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-dynamodb-autoscaling-enabled-e0edf807"
            Description: "Checks whether Auto Scaling or On-Demand is enabled on your DynamoDB tables and/or global secondary indexes. Optionally you can set the read and write capacity units for the table or global secondary index."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "DYNAMODB_AUTOSCALING_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule44:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-dynamodb-pitr-enabled-1c9554b9"
            Description: "Checks that point in time recovery (PITR) is enabled for Amazon DynamoDB tables. The rule is NON_COMPLIANT if point in time recovery is not enabled for Amazon DynamoDB tables"
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "DYNAMODB_PITR_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule45:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ebs-snapshot-public-restorable-check-0eef58d1"
            Description: "Checks whether Amazon Elastic Block Store snapshots are not publicly restorable."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule46:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-ebs-encryption-by-default-e31f6c7c"
            Description: "Checks that Amazon Elastic Block Store (EBS) encryption is enabled by default. The rule is NON_COMPLIANT if the encryption is not enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_EBS_ENCRYPTION_BY_DEFAULT"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule47:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-imdsv2-check-4bbd2ebe"
            Description: "Checks whether your Amazon Elastic Compute Cloud (Amazon EC2) instance metadata version is configured with Instance Metadata Service Version 2 (IMDSv2)."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_IMDSV2_CHECK"
            InputParameters: "{}"

    ConfigConfigRule48:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-instance-managed-by-ssm-8aa7fb54"
            Description: "Checks whether the Amazon EC2 instances in your account are managed by AWS Systems Manager."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Instance"
                  - "AWS::SSM::ManagedInstanceInventory"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_INSTANCE_MANAGED_BY_SSM"
            InputParameters: "{}"

    ConfigConfigRule49:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-instance-multiple-eni-check-c59fcaa7"
            Description: "This control checks to see if Amazon EC2 instance uses multiple ENI/EFA. This control will pass if single network adapters is used."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_INSTANCE_MULTIPLE_ENI_CHECK"
            InputParameters: "{}"

    ConfigConfigRule50:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-instance-no-public-ip-5230fb59"
            Description: "Checks whether Amazon Elastic Compute Cloud (Amazon EC2) instances have a public IP association. The rule is NON_COMPLIANT if the publicIp field is present in the Amazon EC2 instance configuration item. This rule applies only to IPv4."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_INSTANCE_NO_PUBLIC_IP"
            InputParameters: "{}"

    ConfigConfigRule51:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-managedinstance-association-compliance-status-check-2878fa00"
            Description: "Checks whether the compliance status of the Amazon EC2 Systems Manager association compliance is COMPLIANT or NON_COMPLIANT after the association execution on the instance. The rule is COMPLIANT if the field status is COMPLIANT."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::SSM::AssociationCompliance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK"
            InputParameters: "{}"

    ConfigConfigRule52:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-managedinstance-patch-compliance-cff05595"
            Description: "Checks whether the compliance status of the Amazon EC2 Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::SSM::PatchCompliance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK"
            InputParameters: "{}"

    ConfigConfigRule53:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ec2-stopped-instance-ca1902da"
            Description: "Checks whether there are instances stopped for more than the allowed number of days."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EC2_STOPPED_INSTANCE"
            InputParameters: "{\\"AllowedDays\\":\\"30\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule54:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ecs-service-assign-public-ip-disabled-d58fe387"
            Description: "This control checks whether ECS services are configured to automatically assign public IP addresses. This control fails if AssignPublicIP is ENABLED."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::ECS::Service"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{\\"version\\":\\"1.1\\"}"

    ConfigConfigRule55:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-ecs-task-definition-user-for-host-mode-check-fc5a7f3b"
            Description: "This control checks if an Amazon ECS Task Definition with host networking mode has \\"privileged\\" or \\"user\\" container definitions. The control fails with host network mode and container definitions are privileged=false or empty and user=root or empty."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ECS_TASK_DEFINITION_USER_FOR_HOST_MODE_CHECK"
            InputParameters: "{\\"SkipInactiveTaskDefinitions\\":\\"true\\"}"

    ConfigConfigRule56:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-efs-encrypted-check-69e608aa"
            Description: "Elastic File System should be configured to encrypt file data at-rest using AWS KMS."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EFS::FileSystem"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EFS_ENCRYPTED_CHECK"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule57:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-efs-in-backup-plan-9bb8db9e"
            Description: "Checks whether Amazon Elastic File System (Amazon EFS) file systems are added in the backup plans of AWS Backup. The rule is NON_COMPLIANT if EFS file systems are not included in the backup plans."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EFS_IN_BACKUP_PLAN"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule58:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-eip-attached-c0158b88"
            Description: "Checks whether all Elastic IP addresses that are allocated to a VPC are attached to EC2 instances or in-use elastic network interfaces (ENIs)."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::EIP"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EIP_ATTACHED"
            InputParameters: "{}"

    ConfigConfigRule59:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elastic-beanstalk-managed-updates-enabled-e0384ad4"
            Description: "Checks if managed platform updates in an AWS Elastic Beanstalk environment is enabled. The rule is NON_COMPLIANT if the value for ‘ManagedActionsEnabled’ is set to false or if a parameter is provided whose value does not match the existing configurations."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELASTIC_BEANSTALK_MANAGED_UPDATES_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule60:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-audit-logging-enabled-159d3387"
            Description: "This control checks whether Amazon Elasticsearch domains have audit logging enabled. This control fails if an Elasticsearch domain does not have audit logging enabled."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Elasticsearch::Domain"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule61:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-data-node-fault-tolerance-f493d5bd"
            Description: "This control checks whether Amazon ES domains are configured with at least three data nodes and zoneAwarenessEnabled is true."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Elasticsearch::Domain"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule62:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-encrypted-at-rest-01d490f3"
            Description: "Checks whether Amazon Elasticsearch Service (Amazon ES) domains have encryption at rest configuration enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELASTICSEARCH_ENCRYPTED_AT_REST"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule63:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-https-required-e72e6bcd"
            Description: "This control checks whether connections to Amazon Elasticsearch domains are required to use TLS 1.2.  The check fails if the Amazon ES domain TLSSecurityPolicy is not Policy-Min-TLS-1-2-2019-07."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Elasticsearch::Domain"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule64:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-in-vpc-only-63b465be"
            Description: "Checks whether Amazon Elasticsearch Service (Amazon ES) domains are in Amazon Virtual Private Cloud (Amazon VPC)."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELASTICSEARCH_IN_VPC_ONLY"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule65:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-logs-to-cloudwatch-611de79e"
            Description: "This control checks whether Amazon ES domains are configured to send error logs to CloudWatch Logs."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELASTICSEARCH_LOGS_TO_CLOUDWATCH"
            InputParameters: "{}"

    ConfigConfigRule66:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-node-to-node-encryption-check-8fa27838"
            Description: "Check that Amazon Elasticsearch Service nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is disabled on the domain."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK"
            InputParameters: "{}"

    ConfigConfigRule67:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elasticsearch-primary-node-fault-tolerance-8860cc9a"
            Description: "This control checks whether Amazon Elasticsearch domains are configured with at least three dedicated master nodes. This control fails dedicatedMasterEnabled is not true."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Elasticsearch::Domain"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule68:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elb-connection-draining-enabled-e04f1fee"
            Description: "This control checks whether AWS Classic Load Balancers have connection draining enabled."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::ElasticLoadBalancing::LoadBalancer"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule69:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elb-deletion-protection-enabled-5dca822f"
            Description: "Checks whether Elastic Load Balancing has deletion protection enabled. The rule is NON_COMPLIANT if deletion_protection.enabled is false."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELB_DELETION_PROTECTION_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule70:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elb-logging-enabled-8698e870"
            Description: "Checks whether the Application Load Balancer and the Classic Load Balancer have logging enabled. The rule is NON_COMPLIANT if the access_logs.s3.enabled is false or access_logs.S3.bucket is not equal to the s3BucketName that you provided."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELB_LOGGING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule71:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-elb-tls-https-listeners-only-e0d94ec5"
            Description: "Check whether your Classic Load Balancer listeners are configured with HTTPS or SSL protocol for front-end (client to load balancer)."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ELB_TLS_HTTPS_LISTENERS_ONLY"
            InputParameters: "{}"

    ConfigConfigRule72:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-emr-master-no-public-ip-cea948f8"
            Description: "Checks whether Amazon Elastic MapReduce (EMR) clusters' master nodes have public IPs. The rule is NON_COMPLIANT if the master node has a public IP."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "EMR_MASTER_NO_PUBLIC_IP"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule73:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule9}-b8caa6d3"
            Description: "Checks whether the EBS volumes that are in an attached state are encrypted. If you specify the ID of a KMS key for encryption using the kmsId parameter, the rule checks if the EBS volumes in an attached state are encrypted with that KMS key."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::Volume"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ENCRYPTED_VOLUMES"
            InputParameters: "{}"

    ConfigConfigRule74:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-guardduty-enabled-centralized-e19cf4e9"
            Description: "This AWS control checks whether Amazon GuardDuty is enabled in your AWS account and region."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "GUARDDUTY_ENABLED_CENTRALIZED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule75:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-customer-policy-blocked-kms-actions-b78dd048"
            Description: "Checks that the managed AWS Identity and Access Management (IAM) policies that you create do not allow blocked actions on all AWS KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all AWS KMS keys by the managed IAM policy."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_CUSTOMER_POLICY_BLOCKED_KMS_ACTIONS"
            InputParameters: "{\\"blockedActionsPatterns\\":\\"kms:Decrypt,kms:ReEncryptFrom\\"}"

    ConfigConfigRule76:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-inline-policy-blocked-kms-actions-b2b4539b"
            Description: "Checks that the inline policies attached to your IAM users, roles, and groups do not allow blocked actions on all AWS Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on all KMS keys in an inline policy."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_INLINE_POLICY_BLOCKED_KMS_ACTIONS"
            InputParameters: "{\\"blockedActionsPatterns\\":\\"kms:Decrypt,kms:ReEncryptFrom\\"}"

    ConfigConfigRule77:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-ensure-expires-vs9hfj"
            Description: "Checks whether the account password policy for IAM users expires passwords within certain days"
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"MaxPasswordAge\\":\\"90\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule78:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-lowercase-letter-check-fm6rmb"
            Description: "Checks whether the account password policy for IAM users requires at least one lowercase character in password."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"RequireLowercaseCharacters\\":\\"true\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule79:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-minimum-length-check-nq24s8"
            Description: "Checks whether the account password policy for IAM users requires minimum password length."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"MinimumPasswordLength\\":\\"14\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule80:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-number-check-5twhvn"
            Description: "Checks whether the account password policy for IAM users requires at least one number in password."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"RequireNumbers\\":\\"true\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule81:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-prevent-reuse-check-gtl0k"
            Description: "Checks whether the account password policy for IAM users prevents password reuse."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"PasswordReusePrevention\\":\\"24\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule82:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-recommended-defaults-a0d53b7f"
            Description: "Checks whether the account password policy for IAM users meets the specified requirements."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"MinimumPasswordLength\\":\\"8\\",\\"RequireLowercaseCharacters\\":\\"true\\",\\"RequireNumbers\\":\\"true\\",\\"RequireUppercaseCharacters\\":\\"true\\",\\"RequireSymbols\\":\\"true\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule83:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-recommended-defaults-no-symbols-required-3dc4edaf"
            Description: "Checks whether the account password policy for IAM users meets the specified requirements."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"RequireUppercaseCharacters\\":\\"true\\",\\"RequireLowercaseCharacters\\":\\"true\\",\\"RequireNumbers\\":\\"true\\",\\"MinimumPasswordLength\\":\\"7\\",\\"PasswordReusePrevention\\":\\"4\\",\\"MaxPasswordAge\\":\\"90\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule84:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-symbol-check-vauyvs"
            Description: "Checks whether the account password policy for IAM users requires at least one symbol in password."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"RequireSymbols\\":\\"true\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule85:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule10}-uppercase-letter-check-i4nr1"
            Description: "Checks whether the account password policy for IAM users requires at least one uppercase character in password."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"
            InputParameters: "{\\"RequireUppercaseCharacters\\":\\"true\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule86:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-policy-no-statements-with-admin-access-p9vcnb"
            Description: "Checks whether the default version of IAM policies have administrator access"
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::Policy"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS"
            InputParameters: "{}"

    ConfigConfigRule87:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-policy-no-statements-with-full-access-663bf15e"
            Description: "This control checks whether the IAM identity-based custom policies have Allow statements that grant permissions for all actions on a service. The control fails if any policy statement includes \\"Effect\\": \\"Allow\\" with \\"Action\\": \\"Service:*\\"."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS"
            InputParameters: "{}"

    ConfigConfigRule88:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-root-access-key-check-t9asz"
            Description: "Checks whether the root user access key is available."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_ROOT_ACCESS_KEY_CHECK"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule89:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-support-policy-in-use-90250689"
            Description: "Checks that the 'AWSSupportAccess' managed policy is attached to any IAM user, group, or role."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_POLICY_IN_USE"
            InputParameters: "{\\"policyARN\\":\\"arn:aws:iam::aws:policy/AWSSupportAccess\\",\\"policyUsageType\\":\\"ANY\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule90:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-user-mfa-enabled-f5d8f9ee"
            Description: "Checks whether the AWS Identity and Access Management users have multi-factor authentication (MFA) enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_USER_MFA_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule91:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-user-no-policies-check-3t6tme"
            Description: "Checks that none of your IAM users have policies attached. IAM users must inherit permissions from IAM groups or roles."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_USER_NO_POLICIES_CHECK"
            InputParameters: "{}"

    ConfigConfigRule92:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-iam-user-unused-credentials-check-4z2m3"
            Description: "This control checks whether your IAM users have passwords or active access keys that were not used within the previous 90 days."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "IAM_USER_UNUSED_CREDENTIALS_CHECK"
            InputParameters: "{\\"maxCredentialUsageAge\\":\\"90\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule93:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-kms-cmk-not-scheduled-for-deletion-10f95030"
            Description: "Checks whether customer master keys (CMKs) are not scheduled for deletion in AWS Key Management Service (KMS). The rule is NON_COMPLIANT if CMKs are scheduled for deletion."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "KMS_CMK_NOT_SCHEDULED_FOR_DELETION"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule94:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-lambda-function-public-access-prohibited-2a7ce01d"
            Description: "Checks whether the AWS Lambda function policy attached to the Lambda resource prohibits public access."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Lambda::Function"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
            InputParameters: "{}"

    ConfigConfigRule95:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-lambda-function-settings-check-0a40f729"
            Description: "Checks that the AWS Lambda function settings for runtime, role, timeout, and memory size match the expected values."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Lambda::Function"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "LAMBDA_FUNCTION_SETTINGS_CHECK"
            InputParameters: "{\\"runtime\\":\\"nodejs14.x,nodejs12.x,python3.9,python3.8,python3.7,python3.6,java11,java8,java8.al2,go1.x,dotnetcore2.1,dotnetcore3.1,ruby2.7\\"}"

    ConfigConfigRule96:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-lambda-inside-vpc-bba9e346"
            Description: "Checks whether an AWS Lambda function is in an Amazon Virtual Private Cloud."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Lambda::Function"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "LAMBDA_INSIDE_VPC"
            InputParameters: "{}"

    ConfigConfigRule97:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-mfa-enabled-for-iam-console-access-hifrh"
            Description: "Checks whether AWS Multi-Factor Authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::IAM::User"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule98:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-multi-region-${ConfigConfigRule}-cd330546"
            Description: "Checks whether AWS CloudTrail is enabled in your AWS account. Optionally, you can specify which S3 bucket, SNS topic, and Amazon CloudWatch Logs ARN to use."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "MULTI_REGION_CLOUD_TRAIL_ENABLED"
            InputParameters: "{\\"readWriteType\\":\\"ALL\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule99:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-automatic-minor-version-upgrade-enabled-6fbeb621"
            Description: "This control checks if automatic minor version upgrades are enabled for the Amazon RDS database instance."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule100:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-cluster-copy-tags-to-snapshots-enabled-d6e45220"
            Description: "This control checks whether RDS DB clusters are configured to copy all tags to snapshots when the snapshots are created."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBCluster"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule101:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-cluster-deletion-protection-enabled-4b7f0fbe"
            Description: "Checks if an Amazon Relational Database Service (Amazon RDS) cluster has deletion protection enabled. This rule is NON_COMPLIANT if an RDS cluster does not have deletion protection enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_CLUSTER_DELETION_PROTECTION_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule102:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-cluster-event-notifications-configured-5a75c6f0"
            Description: "This control checks whether an Amazon RDS Event subscription for RDS clusters is configured to notify on event categories of both \\"maintenance\\" and \\"failure\\"."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::EventSubscription"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule103:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-cluster-iam-authentication-enabled-2ce8a430"
            Description: "Checks if an Amazon RDS Cluster has AWS Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if an RDS Cluster does not have IAM authentication enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_CLUSTER_IAM_AUTHENTICATION_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule104:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-cluster-multi-az-enabled-567e06d4"
            Description: "This control checks if RDS DB clusters are configured with multi-az."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_CLUSTER_MULTI_AZ_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule105:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-deployed-in-vpc-8a6ce337"
            Description: "This control checks if an RDS instance is deployed in a VPC (EC2-VPC)."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBInstance"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule106:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-enhanced-monitoring-enabled-961b4131"
            Description: "Checks whether enhanced monitoring is enabled for Amazon Relational Database Service (Amazon RDS) instances."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_ENHANCED_MONITORING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule107:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-instance-copy-tags-to-snapshots-enabled-ff4e6ad4"
            Description: "This control checks whether RDS DB instances are configured to copy all tags to snapshots when the snapshots are created."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBInstance"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule108:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-instance-deletion-protection-enabled-3df2c228"
            Description: "Checks if an Amazon Relational Database Service (Amazon RDS) instance has deletion protection enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_INSTANCE_DELETION_PROTECTION_ENABLED"
            InputParameters: "{\\"databaseEngines\\":\\"mariadb,mysql,oracle-ee,oracle-se2,oracle-se1,oracle-se,postgres,sqlserver-ee,sqlserver-se,sqlserver-ex,sqlserver-web\\"}"

    ConfigConfigRule109:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-instance-event-notifications-configured-4be23c1a"
            Description: "This control checks whether an Amazon RDS Event subscription for RDS instances is configured to notify on event categories of both \\"maintenance\\", \\"configuration change\\", and \\"failure\\"."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::EventSubscription"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule110:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-instance-iam-authentication-enabled-b3623692"
            Description: "Checks if an Amazon Relational Database Service (Amazon RDS) instance has AWS Identity and Access Management (IAM) authentication enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_INSTANCE_IAM_AUTHENTICATION_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule111:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-instance-public-access-check-bf1ee267"
            Description: "Check whether the Amazon Relational Database Service instances are not publicly accessible."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBInstance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
            InputParameters: "{}"

    ConfigConfigRule112:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-logging-enabled-60359a6e"
            Description: "Checks that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled. The rule is NON_COMPLIANT if any log types are not enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_LOGGING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule113:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-multi-az-support-a8e60598"
            Description: "Checks whether high availability is enabled for your RDS DB instances."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_MULTI_AZ_SUPPORT"
            InputParameters: "{}"

    ConfigConfigRule114:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-no-default-ports-5ff87049"
            Description: "This control checks whether RDS instances use the default port of that database engine."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBInstance"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule115:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-pg-event-notifications-configured-e5f05385"
            Description: "This control checks whether an Amazon RDS Event subscription for RDS parameter groups is configured to notify on event category of \\"configuration change\\"."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::EventSubscription"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule116:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-sg-event-notifications-configured-38323dd8"
            Description: "This control checks whether an Amazon RDS Event subscription for RDS security groups is configured to notify on event categories of both \\"configuration change\\" and \\"failure\\"."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::EventSubscription"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule117:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-snapshot-encrypted-00634e52"
            Description: "Checks whether Amazon Relational Database Service (Amazon RDS) DB snapshots are encrypted. The rule is NON_COMPLIANT, if Amazon RDS DB snapshots are not encrypted."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_SNAPSHOT_ENCRYPTED"
            InputParameters: "{}"

    ConfigConfigRule118:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-rds-snapshots-public-prohibited-0a302401"
            Description: "Checks if Amazon Relational Database Service (Amazon RDS) snapshots are public."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBSnapshot"
                  - "AWS::RDS::DBClusterSnapshot"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_SNAPSHOTS_PUBLIC_PROHIBITED"
            InputParameters: "{}"

    ConfigConfigRule119:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule11}-06056a36"
            Description: "Checks whether storage encryption is enabled for your RDS DB instances."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::RDS::DBInstance"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RDS_STORAGE_ENCRYPTED"
            InputParameters: "{}"

    ConfigConfigRule120:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-redshift-backup-enabled-1ff694d7"
            Description: "Checks that Amazon Redshift automated snapshots are enabled for clusters. The rule is NON_COMPLIANT if the value for automatedSnapshotRetentionPeriod is greater than MaxRetentionPeriod or less than MinRetentionPeriod or the value is 0."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "REDSHIFT_BACKUP_ENABLED"
            InputParameters: "{\\"MinRetentionPeriod\\":\\"7\\"}"

    ConfigConfigRule121:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-redshift-cluster-audit-logging-enabled-835fa47d"
            Description: "This control checks whether the Amazon Redshift cluster has audit logging enabled."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Redshift::Cluster"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{\\"loggingEnabled\\":\\"true\\"}"

    ConfigConfigRule122:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-redshift-cluster-maintenancesettings-check-5f2d1727"
            Description: "Checks whether Amazon Redshift clusters have the specified maintenance settings."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "REDSHIFT_CLUSTER_MAINTENANCESETTINGS_CHECK"
            InputParameters: "{\\"allowVersionUpgrade\\":\\"true\\"}"

    ConfigConfigRule123:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-redshift-cluster-public-access-check-1a3ca036"
            Description: "Checks whether Amazon Redshift clusters are not publicly accessible."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::Redshift::Cluster"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK"
            InputParameters: "{}"

    ConfigConfigRule124:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-redshift-enhanced-vpc-routing-enabled-12d3e815"
            Description: "This control checks whether a Redshift cluster has EnhancedVpcRouting enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "REDSHIFT_ENHANCED_VPC_ROUTING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule125:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-redshift-require-tls-ssl-878e7b8c"
            Description: "Checks whether Amazon Redshift clusters require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any Amazon Redshift cluster has parameter require_SSL not set to true."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "REDSHIFT_REQUIRE_TLS_SSL"
            InputParameters: "{}"

    ConfigConfigRule126:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-restricted-rdp-fdgnhs"
            Description: "Checks whether the incoming RDP traffic is Allowed from 0.0.0.0/0. This rule is compliant when incoming RDP traffic is restricted."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::SecurityGroup"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "RESTRICTED_INCOMING_TRAFFIC"
            InputParameters: "{\\"blockedPort1\\":\\"3389\\"}"

    ConfigConfigRule127:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule14}-spk963"
            Description: "Checks whether the incoming SSH traffic for the security groups is accessible. The rule is compliant when the IP addresses of the incoming SSH traffic in the security groups are restricted. This rule applies only to IPv4."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::SecurityGroup"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "INCOMING_SSH_DISABLED"
            InputParameters: "{}"

    ConfigConfigRule128:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-root-account-hardware-mfa-enabled-onm3xq"
            Description: "Checks whether users of your AWS account require a hardware multi-factor authentication (MFA) device to sign in with root credentials."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ROOT_ACCOUNT_HARDWARE_MFA_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule129:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-${ConfigConfigRule15}-adv8kb"
            Description: "Checks whether users of your AWS account require a multi-factor authentication (MFA) device to sign in with root credentials."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "ROOT_ACCOUNT_MFA_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule130:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-account-level-public-access-blocks-periodic-4b948fbc"
            Description: "Checks if the required public access block settings are configured from account level."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC"
            InputParameters: "{\\"RestrictPublicBuckets\\":\\"True\\",\\"BlockPublicPolicy\\":\\"True\\",\\"BlockPublicAcls\\":\\"True\\",\\"IgnorePublicAcls\\":\\"True\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule131:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-blacklisted-actions-prohibited-5ec17f9a"
            Description: "Checks that the Amazon Simple Storage Service bucket policy does not allow blacklisted bucket-level and object-level actions on resources in the bucket for principals from other AWS accounts."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_BLACKLISTED_ACTIONS_PROHIBITED"
            InputParameters: "{\\"blacklistedActionPattern\\":\\"s3:DeleteBucketPolicy,s3:PutBucketAcl,s3:PutBucketPolicy,s3:PutObjectAcl,s3:PutEncryptionConfiguration\\"}"

    ConfigConfigRule132:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-level-public-access-prohibited-0f81024a"
            Description: "This control checks if Amazon S3 buckets have bucket level public access blocks applied. This control fails if any of the bucket level settings are set to \\"false\\" public: ignorePublicAcls, blockPublicPolicy, blockPublicAcls, restrictPublicBuckets."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_LEVEL_PUBLIC_ACCESS_PROHIBITED"
            InputParameters: "{}"

    ConfigConfigRule133:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-logging-enabled-vikbk"
            Description: "Checks whether logging is enabled for your S3 buckets."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::S3::Bucket"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_LOGGING_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule134:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-public-read-prohibited-cjruk9"
            Description: "Checks to see if S3 buckets are publicly readable."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::S3::Bucket"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_PUBLIC_READ_PROHIBITED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule135:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-public-write-prohibited-t5t6f2"
            Description: "Checks to see if S3 buckets allow public write."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::S3::Bucket"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule136:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-replication-enabled-0d999e11"
            Description: "Checks whether S3 buckets have cross-region replication enabled."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::S3::Bucket"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_REPLICATION_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule137:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-server-side-encryption-enabled-e6d41296"
            Description: "Checks that your Amazon S3 bucket either has Amazon S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server side encryption."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::S3::Bucket"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"
            InputParameters: "{}"

    ConfigConfigRule138:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-s3-bucket-ssl-requests-only-b9c920fd"
            Description: "Checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL)."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::S3::Bucket"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_SSL_REQUESTS_ONLY"
            InputParameters: "{}"

    ConfigConfigRule139:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-sagemaker-notebook-no-direct-internet-access-42075d9a"
            Description: "Checks whether direct internet access is disabled for an Amazon SageMaker notebook instance. The rule is NON_COMPLIANT if Amazon SageMaker notebook instances are internet-enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule140:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-secretsmanager-rotation-enabled-check-506e3ee4"
            Description: "Checks whether AWS Secrets Manager secret has rotation enabled."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SECRETSMANAGER_ROTATION_ENABLED_CHECK"
            InputParameters: "{}"

    ConfigConfigRule141:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-secretsmanager-scheduled-rotation-success-check-589e3def"
            Description: "Checks and verifies whether AWS Secrets Manager secret rotation has rotated successfully as per the rotation schedule. The rule is NON_COMPLIANT if RotationOccurringAsScheduled is false."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK"
            InputParameters: "{}"

    ConfigConfigRule142:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-secretsmanager-secret-periodic-rotation-b736dbf4"
            Description: "This control checks if your secrets have rotated at least once within 90 days. "
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SECRETSMANAGER_SECRET_PERIODIC_ROTATION"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule143:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-secretsmanager-secret-unused-3ed97fdb"
            Description: "This control checks whether your secrets have been accessed within a specified number of days. The default value is 90 days. Secrets that have not been accessed even once within the number days you define, fail this check."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SECRETSMANAGER_SECRET_UNUSED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule144:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-service-vpc-endpoint-enabled-fd679d14"
            Description: "Checks whether Service Endpoint for the service provided in rule parameter is created for each Amazon VPC. The rule returns NON_COMPLIANT if an Amazon VPC doesn't have a VPC endpoint created for the service."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SERVICE_VPC_ENDPOINT_ENABLED"
            InputParameters: "{\\"serviceName\\":\\"ec2\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule145:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-sns-encrypted-kms-4a6e1579"
            Description: "Checks whether Amazon SNS topic is encrypted with AWS Key Management Service (AWS KMS). The rule is NON_COMPLIANT if the Amazon SNS topic is not encrypted with AWS KMS."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SNS_ENCRYPTED_KMS"
            InputParameters: "{}"

    ConfigConfigRule146:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-sqs-queue-encrypted-725d4d8e"
            Description: "This control checks whether Amazon SQS queues are encrypted at rest."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::SQS::Queue"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule147:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-subnet-auto-assign-public-ip-disabled-b85a19ec"
            Description: "Checks if Amazon Virtual Private Cloud (Amazon VPC) subnets are assigned a public IP address. This rule is NON_COMPLIANT if Amazon VPC has subnets that are assigned a public IP address."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED"
            InputParameters: "{}"

    ConfigConfigRule148:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-vpc-default-security-group-closed-541w4g"
            Description: "Checks whether the default security group for VPC is closed."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::SecurityGroup"
            Source: 
                Owner: "AWS"
                SourceIdentifier: "VPC_DEFAULT_SECURITY_GROUP_CLOSED"
            InputParameters: "{}"

    ConfigConfigRule149:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-vpc-flow-logs-enabled-ks7245"
            Description: "Checks whether Amazon Virtual Private Cloud flow logs are found and enabled for Amazon VPC."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "VPC_FLOW_LOGS_ENABLED"
            InputParameters: "{\\"trafficType\\":\\"REJECT\\"}"
            MaximumExecutionFrequency: "Twelve_Hours"

    ConfigConfigRule150:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-vpc-network-acl-unused-check-6ad00537"
            Description: "Checks if there are unused Network Access Control Lists (NACLs). The rule is NON_COMPLIANT if an NACL is not associated with a subnet."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "VPC_NETWORK_ACL_UNUSED_CHECK"
            InputParameters: "{}"

    ConfigConfigRule151:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-vpc-sg-open-only-to-authorized-ports-5989683e"
            Description: "This control checks whether the security groups allow unrestricted incoming traffic. The control fails if ports allow unrestricted traffic on ports other than 80 and 443, which are default values for parameter authorizedTcpPorts."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS"
            InputParameters: "{\\"authorizedTcpPorts\\":\\"80,443\\"}"

    ConfigConfigRule152:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: !Sub "securityhub-vpc-sg-${ConfigConfigRule13}-1a7d3012"
            Description: "This control checks whether unrestricted incoming traffic for the security groups is accessible to the specified ports [3389, 20, 23, 110, 143, 3306, 8080, 1433, 9200, 9300, 25, 445, 135, 21, 1434, 4333, 5432, 5500, 5601, 22] that have the highest risk."
            Scope: 
                ComplianceResourceTypes: 
                  - "AWS::EC2::SecurityGroup"
            Source: 
                Owner: "CUSTOM_LAMBDA"
                SourceIdentifier: !Sub "arn:aws:lambda:${AWS::Region}:572901956981:function:SecurityHubConfigRule"
                SourceDetails: 
                  - 
                    EventSource: "aws.config"
                    MessageType: "ConfigurationItemChangeNotification"
            InputParameters: "{}"

    ConfigConfigRule153:
        Type: "AWS::Config::ConfigRule"
        Properties:
            ConfigRuleName: "securityhub-waf-classic-logging-enabled-c68737e7"
            Description: "This control checks whether logging is enabled for a WAF global Web ACL. This control fails if logging is not enabled for the Web ACL."
            Scope: {}
            Source: 
                Owner: "AWS"
                SourceIdentifier: "WAF_CLASSIC_LOGGING_ENABLED"
            InputParameters: "{}"
            MaximumExecutionFrequency: "Twelve_Hours"

